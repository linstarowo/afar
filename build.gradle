buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'com.gradleup.shadow' version '8.3.0'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {

        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://cursemaven.com" }
    maven { url = "https://api.modrinth.com/maven" }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly("org.xerial:sqlite-jdbc:3.47.2.0")
//    minecraftLibrary("org.xerial:sqlite-jdbc:3.47.2.0")

    runtimeOnly(fg.deobf("maven.modrinth:journeymap:r7FWVNCs"))
    implementation(fg.deobf("curse.maven:rubidium-574856:4573226"))
    implementation(fg.deobf("maven.modrinth:minecraft-sqlite-jdbc:UAFoGR0O"))

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")){
        jarJar.ranged(it, "[0.4.1,)")
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

//    from { configurations.minecraftLibrary.collect { it.isDirectory() ? it : zipTree(it) } }
//    into('assets') {
//        from 'assets'
//    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

shadowJar {
//    dependencies {
//        include(dependency("org.xerial:sqlite-jdbc:3.47.2.0"))
//    }

//    relocate("org.sqlite", "afar.sqlite"){
//        exclude "org/sqlite/native/**"
//    }
//    relocate "jdbc:sqlite", "jdbc:afar_sqlite"
//    transform(NativeTransformer) {
//        rootDir = project.rootDir
//        relocateNative "org/sqlite", "afar_sqlite"
//        relocateNative "org_sqlite", "afar_1sqlite"
//    }


    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.named('jarJar', Jar) {
    from sourceSets.main.output
    from zipTree(tasks.shadowJar.outputs.files.singleFile)
//    from configurations.jarJar.collect { it.isDirectory() ? it : zipTree(it) }
    archiveClassifier.set('')
}

tasks.jarJar.dependsOn(tasks.shadowJar)
build.dependsOn(tasks.jarJar)
